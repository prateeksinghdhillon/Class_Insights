service: class-insights-classes
#file: noinspection YAMLSchemaValidation,YAMLSchemaValidation,YAMLSchemaValidation,YAMLSchemaValidation
frameworkVersion: "3"
version: 1.0.1
commonData: ${file(../../serverless.common.yml)}

package:
  individually: true

plugins:
  - serverless-offline
  - serverless-bundle
  - serverless-dotenv-plugin
	
custom:
  dotenv:
    # default: project root
    path: ../../.env

provider:
  name: aws
  runtime: ${self:commonData.serverlessConfiguration.runtime}
  versionFunctions: ${self:commonData.serverlessConfiguration.versionFunctions}
  stage: ${self:commonData.serverlessConfiguration.stage}
  region: ${self:commonData.serverlessConfiguration.region}
  memorySize: ${self:commonData.serverlessConfiguration.environment.stageSpecificData.${self:provider.environment.stage}.defaultMemorySize}
  timeout: ${self:commonData.serverlessConfiguration.timeout}

  environment:
    stage: ${self:commonData.serverlessConfiguration.stage}
    accountRegion: ${self:commonData.serverlessConfiguration.region}
    serviceUrlIdentifier: classes
    authorizerType: ${self:commonData.serverlessConfiguration.environment.authorizerType}
    authorizerArn: ${self:commonData.serverlessConfiguration.environment.stageSpecificData.${self:provider.environment.stage}.authorizerArn}
    authorizerResultTtlInSeconds: ${self:commonData.serverlessConfiguration.environment.authorizerResultTtlInSeconds}
    authorizerIdentitySource: ${self:commonData.serverlessConfiguration.environment.authorizerIdentitySource}

  tracing:
    apiGateway: true
    lambda: true
  apiGateway:
    metrics: true
  logs:
    http:
      level: ERROR

  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
        - s3:GetObject
        - s3:PutObject
      Resource: "*"

functions:
  addClass:
    handler: handlers/addClass.addClass
    events:
      - http:
          path: ${self:provider.environment.serviceUrlIdentifier}/addClasses
          method: post
          cors: true
          # authorizer: authorizerFunc                            #NOTE:-uncomment it for local
          authorizer:                                      
            type: ${self:provider.environment.authorizerType}
            arn: ${self:provider.environment.authorizerArn}
            resultTtlInSeconds: ${self:provider.environment.authorizerResultTtlInSeconds}
            identitySource: ${self:provider.environment.authorizerIdentitySource}
          response:
            headers:
              X-Content-Type-Options: "'nosniff'"
              Access-Control-Allow-Origin: "'*'"
  addTeachers:
    handler: handlers/addTeachers.addTeachers
    events:
      - http:
          path: ${self:provider.environment.serviceUrlIdentifier}/addTeachers
          method: post
          cors: true
          # authorizer: authorizerFunc                            #NOTE:-uncomment it for local
          authorizer:                                      
            type: ${self:provider.environment.authorizerType}
            arn: ${self:provider.environment.authorizerArn}
            resultTtlInSeconds: ${self:provider.environment.authorizerResultTtlInSeconds}
            identitySource: ${self:provider.environment.authorizerIdentitySource}
          response:
            headers:
              X-Content-Type-Options: "'nosniff'"
              Access-Control-Allow-Origin: "'*'"
  addStudent:
    handler: handlers/addStudent.addStudent
    events:
      - http:
          path: ${self:provider.environment.serviceUrlIdentifier}/addStudent
          method: post
          cors: true
          # authorizer: authorizerFunc                            #NOTE:-uncomment it for local
          authorizer:                                      
            type: ${self:provider.environment.authorizerType}
            arn: ${self:provider.environment.authorizerArn}
            resultTtlInSeconds: ${self:provider.environment.authorizerResultTtlInSeconds}
            identitySource: ${self:provider.environment.authorizerIdentitySource}
          response:
            headers:
              X-Content-Type-Options: "'nosniff'"
              Access-Control-Allow-Origin: "'*'"
  getTeachers:
    handler: handlers/getTeachers.getTeachers
    events:
      - http:
          path: ${self:provider.environment.serviceUrlIdentifier}/getTeachers
          method: get
          cors: true
          # authorizer: authorizerFunc                            #NOTE:-uncomment it for local
          authorizer:                                      
            type: ${self:provider.environment.authorizerType}
            arn: ${self:provider.environment.authorizerArn}
            resultTtlInSeconds: ${self:provider.environment.authorizerResultTtlInSeconds}
            identitySource: ${self:provider.environment.authorizerIdentitySource}
          response:
            headers:
              X-Content-Type-Options: "'nosniff'"
              Access-Control-Allow-Origin: "'*'"
  getStudents:
    handler: handlers/getStudents.getStudents
    events:
      - http:
          path: ${self:provider.environment.serviceUrlIdentifier}/getStudents
          method: get
          cors: true
          # authorizer: authorizerFunc                            #NOTE:-uncomment it for local
          authorizer:                                      
            type: ${self:provider.environment.authorizerType}
            arn: ${self:provider.environment.authorizerArn}
            resultTtlInSeconds: ${self:provider.environment.authorizerResultTtlInSeconds}
            identitySource: ${self:provider.environment.authorizerIdentitySource}
          response:
            headers:
              X-Content-Type-Options: "'nosniff'"
              Access-Control-Allow-Origin: "'*'"
  getStudentsByClass:
    handler: handlers/getStudentsByClass.getStudentsByClass
    events:
      - http:
          path: ${self:provider.environment.serviceUrlIdentifier}/getStudentsByClass/{classId}
          method: get
          cors: true
          # authorizer: authorizerFunc                            #NOTE:-uncomment it for local
          authorizer:                                      
            type: ${self:provider.environment.authorizerType}
            arn: ${self:provider.environment.authorizerArn}
            resultTtlInSeconds: ${self:provider.environment.authorizerResultTtlInSeconds}
            identitySource: ${self:provider.environment.authorizerIdentitySource}
          response:
            headers:
              X-Content-Type-Options: "'nosniff'"
              Access-Control-Allow-Origin: "'*'"
  addStudentsToClass:
    handler: handlers/addStudentsToClass.addStudentsToClass
    events:
      - http:
          path: ${self:provider.environment.serviceUrlIdentifier}/addStudentsToClass/{classId}
          method: post
          cors: true
          # authorizer: authorizerFunc                            #NOTE:-uncomment it for local
          authorizer:                                      
            type: ${self:provider.environment.authorizerType}
            arn: ${self:provider.environment.authorizerArn}
            resultTtlInSeconds: ${self:provider.environment.authorizerResultTtlInSeconds}
            identitySource: ${self:provider.environment.authorizerIdentitySource}
          response:
            headers:
              X-Content-Type-Options: "'nosniff'"
              Access-Control-Allow-Origin: "'*'"

  # authorizerFunc:                                                                #NOTE:-uncomment it for local
  #   handler: ../auth/authHandler/authorizer.main
